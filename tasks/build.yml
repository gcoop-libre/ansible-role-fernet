---

- name: Include APT tasks
  ansible.builtin.include_tasks: apt.yml
  when:
    - fernet_apt_conf is defined
    - fernet_apt_conf | bool

- name: Delete Fernet directory
  ansible.builtin.file:
    path: "{{ fernet_dir }}"
    state: absent
  when:
    - fernet_dir_clean is defined
    - fernet_dir_clean | bool

- name: Verify exists directory virtualenv {{ fernet_venv_dir }}
  ansible.builtin.stat:
    path: '{{ fernet_venv_dir }}'
  register: result_venv_dir_stat
  when:
    - fernet_venv_dir is defined

- name: Initialize virtualenv {{ fernet_venv_dir }}
  ansible.builtin.command: '{{ fernet_venv_cmd }} {{ fernet_venv_dir }}'
  changed_when: false
  when:
    - result_venv_dir_stat is defined
    - not result_venv_dir_stat.stat.exists | bool
    - fernet_venv_cmd is defined

- name: Generate Ecryption Key
  ansible.builtin.set_fact:
    fernet_key: "{{ lookup('pipe', fernet_key_gen_cmd) }}"
  no_log: "{{ fernet_key_no_log | default(true) }}"
  when:
    - (fernet_key is undefined) or (fernet_key is defined and fernet_key | string | length < 44)

- name: Validate Encryption Key
  ansible.builtin.fail:
    msg: Invalid {{ fernet_key }} not match {{ fernet_key_regex }}
  no_log: "{{ fernet_key_no_log | default(true) }}"
  when:
    - fernet_key is not match(fernet_key_regex)

- name: Ensure exists source directory {{ fernet_dir_source }}
  ansible.builtin.file:
    group: "{{ fernet_dir_source_group | default('root') }}"
    mode: "{{ fernet_dir_source_mode | default('0700') }}"
    owner: "{{ fernet_dir_source_owner | default('root') }}"
    path: "{{ fernet_dir_source }}"
    state: directory
  become: true

- name: Generate source pipe encrypt code {{ fernet_encrypt_source_path }}
  ansible.builtin.template:
    src: templates/pe.j2
    dest: "{{ fernet_encrypt_source_path }}"
    owner: "{{ fernet_encrypt_source_owner | default('root') }}"
    group: "{{ fernet_encrypt_source_group | default('root') }}"
    mode: "{{ fernet_encrypt_source_mode | default('0700') }}"
  become: true
  when:
    - fernet_encrypt_source_path is defined
    - fernet_encrypt_source_path | length > 0

- name: Generate source pipe decrypt code {{ fernet_decrypt_source_path }}
  ansible.builtin.template:
    src: templates/pd.j2
    dest: "{{ fernet_decrypt_source_path }}"
    owner: "{{ fernet_decrypt_source_owner | default('root') }}"
    group: "{{ fernet_decrypt_source_group | default('root') }}"
    mode: "{{ fernet_decrypt_source_mode | default('0700') }}"
  become: true
  when:
    - fernet_decrypt_source_path is defined
    - fernet_decrypt_source_path | length > 0

- name: Include PIP virtualvenv tasks
  ansible.builtin.include_tasks: pip-venv.yml
  when:
    - fernet_pip_venv is defined
    - fernet_pip_venv | bool

- name: Include PIP package tasks
  ansible.builtin.include_tasks: pip-package.yml
  loop: '{{ fernet_pip_packages_list }}'
  when:
    - fernet_pip_packages_install is defined
    - fernet_pip_packages_install | bool
    - fernet_pip_packages_list is defined
    - fernet_pip_packages_list | length > 0

- name: Test Pipe Encrypt Pipe Decrypt # noqa command-instead-of-shell
  ansible.builtin.shell: "{{ fernet_test_encrypt_decrypt_cmd }}"
  changed_when: false
  register: fernet_test_encrypt_decrypt_result
  when:
    - fernet_test_encrypt_decrypt is defined
    - fernet_test_encrypt_decrypt | bool
    - fernet_test_encrypt_decrypt_cmd is defined
    - fernet_test_encrypt_decrypt_cmd | length > 0
  become: true

- name: Fail when Pipe Encrypt Pipe Decrypt can't encrypt or decrypt
  ansible.builtin.fail:
    msg: Test Pipe Encrypt/Decrypt don't match with {{ fernet_test_encrypt_decrypt_txt }}
  when:
    - fernet_test_encrypt_decrypt_result is defined
    - fernet_test_encrypt_decrypt_result.failed is defined
    - not fernet_test_encrypt_decrypt_result.failed
    - fernet_test_encrypt_decrypt_result.stdout is defined
    - fernet_test_encrypt_decrypt_result.stdout != fernet_test_encrypt_decrypt_txt

- name: Ensure exists tmp directory {{ fernet_dir_tmp }}
  ansible.builtin.file:
    group: "{{ fernet_dir_tmp_group | default('root') }}"
    mode: "{{ fernet_dir_tmp_mode | default('0755') }}"
    owner: "{{ fernet_dir_tmp_owner | default('root') }}"
    path: "{{ fernet_dir_tmp }}"
    state: directory
  become: true
  when:
    - fernet_dir_tmp_exists is defined
    - fernet_dir_tmp_exists | bool
    - fernet_dir_tmp is defined
    - fernet_dir_tmp | length > 0

- name: Build encrypt
  ansible.builtin.shell: "{{ fernet_pyinstaller_encrypt_cmd }}"
  args:
    executable: /bin/bash
    chdir: "{{ fernet_dir_source }}"
  changed_when: false
  no_log: "{{ fernet_build_encrypt_no_log | default(false) }}"
  register: fernet_build_encrypt_result

- name: Build decrypt
  ansible.builtin.shell: "{{ fernet_pyinstaller_decrypt_cmd }}"
  args:
    executable: /bin/bash
    chdir: "{{ fernet_dir_source }}"
  changed_when: false
  no_log: "{{ fernet_build_decrypt_no_log | default(false) }}"
  register: fernet_test_dist_decrypt_result
  when:
    - fernet_test_dist_decrypt is defined
    - fernet_test_dist_decrypt | bool
    - fernet_pyinstaller_decrypt_cmd is defined
    - fernet_pyinstaller_decrypt_cmd | length > 0

- name: Delete source directory
  ansible.builtin.file:
    path: "{{ fernet_dir_source }}"
    state: absent
  when:
    - fernet_dir_source_clean is defined
    - fernet_dir_source_clean | bool

- name: Delete VirtualEnv directory
  ansible.builtin.file:
    path: "{{ fernet_venv_dir }}"
    state: absent
  when:
    - fernet_venv_clean is defined
    - fernet_venv_clean | bool

- name: Test Build Pipe Encrypt {{ fernet_test_encrypt_txt }}
  ansible.builtin.shell: "{{ fernet_test_dist_encrypt_cmd }}"
  args:
    executable: /bin/bash
  changed_when: false
  register: fernet_test_dist_encrypt_result
  when:
    - fernet_test_dist_encrypt is defined
    - fernet_test_dist_encrypt | bool
    - fernet_test_dist_encrypt_cmd is defined
    - fernet_test_dist_encrypt_cmd | length > 0

- name: Fail when Build Encrypted Test is invalid
  ansible.builtin.fail:
    msg: Invalid {{ fernet_test_dist_encrypt_result.stdout }} not match {{ fernet_encrypted_regex }}
  no_log: "{{ fernet_test_encrypted_no_log | default(false) }}"
  when:
    - fernet_test_dist_encrypt_result is defined
    - fernet_test_dist_encrypt_result.stdout is defined
    - fernet_test_dist_encrypt_result.stdout is not match(fernet_encrypted_regex)

- name: Set Test Build Decrypt Command using Build Encrypted Result
  ansible.builtin.set_fact:
    fernet_test_dist_decrypt_cmd: echo {{ fernet_test_dist_encrypt_result.stdout }} | {{ fernet_decrypt_dist_path }}
  when:
    - fernet_test_dist_encrypt_result is defined
    - fernet_test_dist_encrypt_result.stdout is defined
    - fernet_test_dist_encrypt_result.stdout | length > 0

- name: Test Build Pipe decrypt
  ansible.builtin.shell: "{{ fernet_test_dist_decrypt_cmd }}"
  args:
    executable: /bin/bash
  changed_when: false
  register: fernet_test_dist_decrypt_result
  when:
    - fernet_test_dist_decrypt is defined
    - fernet_test_dist_decrypt | bool
    - fernet_test_dist_decrypt_cmd is defined
    - fernet_test_dist_decrypt_cmd | length > 0

- name: Fail when Build Decrypted Test is invalid
  ansible.builtin.fail:
    msg: Invalid {{ fernet_test_dist_decrypt_result.stdout }} != fernet_test_encrypt_txt
  no_log: "{{ fernet_test_encrypted_no_log | default(false) }}"
  when:
    - fernet_test_dist_decrypt_result is defined
    - fernet_test_dist_decrypt_result.stdout is defined
    - fernet_test_dist_decrypt_result.stdout != fernet_test_encrypt_txt

- name: Add Fernet to the global PATH environment
  ansible.builtin.copy:
    dest: /etc/profile.d/fernet.sh
    content: PATH=$PATH:{{ fernet_dir_dist }}
    owner: "{{ fernet_global_path_owner | default('root') }}"
    group: "{{ fernet_global_path_group | default('root') }}"
    mode: "{{ fernet_global_path_mode | default('0755') }}"
  become: true
  when:
    - fernet_global_path is defined
    - fernet_global_path | bool
